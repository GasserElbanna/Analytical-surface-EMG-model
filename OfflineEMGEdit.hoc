//Offline simulation of EMG.  Requires dummy.mod to be present and compiled in order to f(x).

load_file("nrngui.hoc")
load_file("BBGlobals.hoc")

Gun = startsw()

objref pc2, PhiStore
objref NetPhi, TwitchForce, nf, DataStore, InVec, InFile, InString
DataStore = new List()
pc2 = new ParallelContext()
PhiStore = new Vector()
PhiStore.resize(tstop/dt)

for i=0, Tot_numcells-1 {
	InVec = new Vector()
	InFile = new File()
	InString = new String()
	sprint(InString.s,"OutVec%d.dat",i)
	InFile.ropen(InString.s)
	InVec.vread(InFile)
	//InVec.printf()
	DataStore.append(InVec)
	//DataStore.o(i).printf()
	InFile.close()
}

// Assigned Values (Parameters from Fuglevand 1992 and 1993)
I = 388 								//nA
b = 1									//millimeter
sigR = 0.063							//mho/m
sigZ = 0.33								//mho/m
vfib = 4								//fiber conduction velocity, m/s
ze = 40									//millimeter
Lmf = 240								//length of muscle fiber, mm
xt = 8									//distance from electrode to muscle
fiberdensity = 20						//Define desired unit fiber density, such as 20/mm.
pi = 3.14159265359						//For some reason, pi doesn't exist by default.
dltaT = dt								//Need to be able to utilize dt during post-processing when it isn't currently running.
idl_ncs = 280							//Ideal number of alpha-MNs for an intact muscle.  Smallest human MUs estimated ~50.
idl_nft = 8500							//Ideal number of muscle fibers for intact muscle.  Should we calculate this from diameters?
idl_Ptot = 0							//Ideal twitch force of intact muscle.  Initialized to 0.	
Pit = 0									//Initialize to 0.  This is the theoretical max twitch for for the muscle if ALL fibers contract synchonously.
for i=1, idl_ncs{						//Loop to calculate the max synchronous twitch force for an intact muscle.
	Pit = RP^(i/idl_ncs)
	idl_Ptot+=Pit
}
Amuscle = (1)*(100)						//Muscle cross sectional area, in cm^2.  Multiplied by 100 to get mm^2
										//Please note that the current value is arbitrary.
Rmuscle = sqrt(Amuscle/pi)				//radius of the overall muscle, in mm.

DistMuscle = xt + (2*Rmuscle)				//Define Proximal and Distal borders of muscle to make sure fibers are actually located within muscle.
ProxMuscle = xt 
CenterMU = 0 							//Initialize the center coordinate for the MU to zero.
AreaMU = 0
RadiusMU = 0
CenterMU = 0

NetPhi = new Vector()	
TwitchForce = new Vector()	
nf = new Vector()
	
TwitchForce.resize(0)
nf.resize(0)

for i=0, Tot_numcells-1 {
	TwitchForce.append(RP^((i+1)/Tot_numcells))
	nf.append(gfloor(idl_nft/idl_Ptot)*TwitchForce.x[i])
}

//Arg 1: Spike Vector for Cell
//Arg 2: number of fibers for cell.
func EMGen(){local id localobj temprand, tempradius, tempPhi, temptotalPhi, PhiHolder, returnvec
	id = hoc_ac_
	temprand = new Random()
	temprand.Random123(1)
	tempradius = new Vector()
	tempPhi = new List()
	temptotalPhi = new Vector()
	PhiHolder = new Vector()
	returnvec = new Vector()
	
	AreaMU = $2/fiberdensity
	RadiusMU = sqrt(AreaMU/pi)
	CenterMU = temprand.uniform(DistMuscle-RadiusMU, ProxMuscle+RadiusMU)
	
	tempradius.resize($2)
	temprand.uniform(CenterMU-RadiusMU,CenterMU+RadiusMU)
	tempradius.setrand(temprand)
	
	temptotalPhi.resize(tstop/dt)
	
	for i=0, $2-1 {
		if ($o1.size ==2){
			tempPhi.append(new Matrix($o1.size+1,tstop/dt))
			tempPhi.o(i).setrow(0,0)
		}else{
			tempPhi.append(new Matrix($o1.size, tstop/dt))
			for k=2, $o1.size-1 {
				tempPhi.o(i).setrow(k-2,0)
				ndx = $o1.x[k]/dltaT
				for ii= ndx, tempPhi.o(i).ncol-1 {
					tempPhi.o(i).x[k-2][ii] = (I/(4*pi*sigR))*(1/(sqrt(tempradius.x[i]^2*sigZ/sigR +(vfib*(ii-ndx)*dltaT-ze)^2)) \
						- 1/(sqrt(tempradius.x[i]^2*sigZ/sigR +(vfib*(ii-ndx)*dltaT-ze+b)^2))\
						- 1/(sqrt(tempradius.x[i]^2*sigZ/sigR +(-vfib*(ii-ndx)*dltaT-ze)^2)) \
						+ 1/(sqrt(tempradius.x[i]^2*sigZ/sigR +(-vfib*(ii-ndx)*dltaT-ze+b)^2)))
						//Equation adadpted from Fuglevand, 1992
				}
			}
		}
	}
	
	//This section sums up the total EMG value for this one cell...
	for i = 0, $2-1 {
		for j = 0, tempPhi.o(i).nrow-1 {
			tempPhi.o(i).getrow(j,PhiHolder)
			temptotalPhi.add(PhiHolder)
			PhiHolder.resize(0)
		}
	}
	returnvec.append($o1.x[0])
	returnvec.append($o1.x[1])
	returnvec.append(temptotalPhi)
	pc2.pack(returnvec)
	pc2.post(id)
	print "Finished EMG", id
	return 0
}

{pc2.runworker()}						//Necessary to make this whole process work.

for ii=0, DataStore.count()-1{
	if (DataStore.o(ii).size>=3) {
		if (DataStore.o(ii).x[0] == 1) {
			cellnum = DataStore.o(ii).x[1]
			pc2.submit("EMGen", DataStore.o(ii), nf.x[cellnum])
		}else if (DataStore.o(ii).x[0] == 2){
			cellnum = DataStore.o(ii).x[1] + R_numcells
			pc2.submit("EMGen", DataStore.o(ii), nf.x[cellnum])
		}else {
			cellnum = DataStore.o(ii).x[1] + S_numcells + R_numcells
			pc2.submit("EMGen", DataStore.o(ii), nf.x[cellnum])
		}
	}
}


id = 0
objref returnvec
returnvec = new Vector()
objref ListEMG
ListEMG = new List()

while((id=pc2.working)>0) {
	pc2.take(id)
	print id
	pc2.unpack(returnvec)
	ListEMG.append(returnvec)
/* 	for i=2, returnvec.size()-1 {
		PhiStore.x[i-2]+=(returnvec.x[i])
	} */
	returnvec = new Vector()
}

print "Offline EMG Run Time", startsw() - Gun

{pc2.done()}

objref PhiFile, PhiStr, FileEMG[ListEMG.count()], author
PhiFile= new File()
PhiStr = new String()

/* sprint(PhiStr.s,"OutEMG.txt")
PhiFile.wopen(PhiStr.s)
PhiStore.printf(PhiFile)
PhiFile.close() */

for i = 0, ListEMG.count()-1 {
	FileEMG[i] = new File()
	author = new String()
	sprint(author.s, "IndividualEMG%d.txt",i)
	FileEMG[i].wopen(author.s)
	ListEMG.o(i).printf(FileEMG[i])
	FileEMG[i].close()
}